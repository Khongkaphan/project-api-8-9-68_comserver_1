from flask import Flask, request, jsonify, send_from_directory
import uuid
import os
from PIL import Image
from werkzeug.utils import secure_filename
from ultralytics import YOLO
from flask_cors import CORS
from urllib.parse import quote_plus
import cv2
import numpy as np
import threading
from functools import wraps
from datetime import datetime, timedelta, timezone
from pymongo import MongoClient
from werkzeug.security import check_password_hash, generate_password_hash
from promptpay import qrcode
import base64
from io import BytesIO
import hashlib
import json
import requests
import pytesseract
import re
from flask import Flask, redirect, url_for
from flask_dance.contrib.google import make_google_blueprint, google
from dotenv import load_dotenv
from flask import render_template
import smtplib
import secrets
from email.message import EmailMessage
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_mail import Mail, Message
import random
from pymongo.server_api import ServerApi
from urllib.parse import quote
from concurrent.futures import ThreadPoolExecutor
from collections import defaultdict
from zoneinfo import ZoneInfo
import shutil
import jwt
from dateutil.relativedelta import relativedelta
import torch
import concurrent.futures
from ocr_slip import AdvancedSlipOCR


# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Flask
app = Flask(__name__)
CORS(app)

load_dotenv()

# key ‡∏û‡∏¥‡πÄ‡∏®‡∏©
API_KEY = os.getenv("API_KEY")
SECRET_KEY = os.getenv("SECRET_KEY")
API_BASE_URL = os.getenv("API_BASE_URL")

app.config.update(
    MAIL_SERVER="smtp.gmail.com",
    MAIL_PORT=587,
    MAIL_USE_TLS=True,
    MAIL_USERNAME=os.getenv("EMAIL_USER"),
    MAIL_PASSWORD=os.getenv("EMAIL_PASS"),
    MAIL_DEFAULT_SENDER="Phurinsukman3@gmail.com",  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
)

mail = Mail(app)

GOOGLE_CLIENT_ID = os.getenv("GOOGLE_OAUTH_CLIENT_ID")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH_CLIENT_SECRET")
GOOGLE_REDIRECT_URI = os.getenv("GOOGLE_REDIRECT_URI")

# key ‡∏û‡∏¥‡πÄ‡∏®‡∏©
API_KEY = os.getenv("API_KEY")
SECRET_KEY = os.getenv("SECRET_KEY")
API_BASE_URL = os.getenv("API_BASE_URL")

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
MONGO_URI = "mongodb://localhost:27017"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
client = MongoClient(MONGO_URI)
db = client["api_database"]
users_collection = db["users"]
api_keys_collection = db["api_keys"]
orders_collection = db["orders"]
otp_collection = db["otp_reset"]
uploaded_files_collection = db["uploaded_files"]
uploaded_files_collection.create_index([("created_at", 1)], expireAfterSeconds=3600)


# ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
@app.route("/")
def home():
    # ‡πÉ‡∏ä‡πâ relative path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'home page'
    return send_from_directory(os.path.join(os.getcwd(), "homepage"), "index.html")


# ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
@app.route("/<path:filename>")
def serve_other_files(filename):
    # ‡πÉ‡∏´‡πâ Flask ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
    return send_from_directory(os.getcwd(), filename)


# ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå CSS, JS ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'home page'
@app.route("/homepage/<path:filename>")
def serve_home_page_files(filename):
    # ‡πÉ‡∏´‡πâ Flask ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå CSS ‡πÅ‡∏•‡∏∞ JS ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'home page'
    return send_from_directory(os.path.join(os.getcwd(), "homepage"), filename)


# ‡∏™‡∏£‡πâ‡∏≤‡∏á jwt
def generate_token(email):
    payload = {"email": email, "exp": datetime.utcnow() + timedelta(hours=1)}
    token = jwt.encode(payload, SECRET_KEY, algorithm="HS256")
    # ‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå token ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    print(f"üîê Generated token for {email}: {token}")
    return token


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None

        if "Authorization" in request.headers:
            bearer = request.headers.get("Authorization")  # Bearer <token>
            parts = bearer.split()
            if len(parts) == 2 and parts[0] == "Bearer":
                token = parts[1]

        if not token:
            return jsonify({"error": "Token is missing"}), 401

        try:
            data = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
            current_user = users_collection.find_one({"email": data["email"]})
            if not current_user:
                return jsonify({"error": "User not found"}), 404
        except jwt.ExpiredSignatureError:
            return jsonify({"error": "Token has expired"}), 401
        except jwt.InvalidTokenError:
            return jsonify({"error": "Invalid token"}), 401

        return f(current_user, *args, **kwargs)

    return decorated


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
@app.route("/signup", methods=["POST"])
def signup():
    data = request.json  # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON
    email = data.get("email")
    username = data.get("username")
    password = data.get("password")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
    if not email or not username or not password:
        return jsonify({"message": "All fields are required"}), 400

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if users_collection.find_one({"email": email}):
        return jsonify({"message": "Email already exists"}), 400

    # ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    hashed_password = generate_password_hash(
        password, method="pbkdf2:sha256", salt_length=8
    )

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    users_collection.insert_one(
        {"email": email, "username": username, "password": hashed_password}
    )

    return jsonify({"message": "Signup successful"}), 201


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
@app.route("/login", methods=["POST"])
def login():
    data = request.get_json()
    email = data.get("email")
    password = data.get("password")

    if not email or not password:
        return jsonify({"error": "Email and password are required"}), 400

    user = users_collection.find_one({"email": email})
    if not user:
        return jsonify({"error": "User not found"}), 404

    if user.get("password") is None:
        # ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Google ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        return (
            jsonify(
                {
                    "error": "This account uses Google login only. Please login with Google."
                }
            ),
            400,
        )

    if not check_password_hash(user["password"], password):
        return jsonify({"error": "Incorrect password"}), 400

    token = generate_token(email)
    return jsonify({"message": "Login successful", "token": token}), 200


# ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
UPLOAD_FOLDER = "uploads"
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
def allowed_file(filename):
    return "." in filename  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ "." ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á
def is_image(file_path):
    try:
        with Image.open(file_path) as img:
            img.verify()
        return True
    except (IOError, SyntaxError):
        return False


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á .jfif ‡πÄ‡∏õ‡πá‡∏ô .jpg
def convert_jfif_to_jpg(input_path):
    output_path = input_path.rsplit(".", 1)[0] + ".jpg"
    with Image.open(input_path) as img:
        img.convert("RGB").save(output_path, "JPEG")
    os.remove(input_path)  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
    return output_path


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
def delete_file(file_path):
    try:
        os.remove(file_path)
        print(f"Deleted file: {file_path}")
    except Exception as e:
        print(f"Error deleting file: {e}")


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡∏∑‡πÉ‡∏ô folder upload
def delete_all_files_in_upload_folder():
    folder = app.config["UPLOAD_FOLDER"]
    for filename in os.listdir(folder):
        file_path = os.path.join(folder, filename)
        if os.path.isfile(file_path):
            try:
                os.remove(file_path)
                print(f"Deleted file: {file_path}")
            except Exception as e:
                print(f"Error deleting file {file_path}: {e}")


# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å local
def load_model(model_name):
    return YOLO(os.path.join("models", model_name))  # # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç


models = {
    "porn": load_model("best-porn.pt"),
    "weapon": load_model("best-weapon.pt"),
    "cigarette": load_model("best-cigarette.pt"),
    "violence": load_model("best-violence.pt"),
}


# ‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ YOLO ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
def analyze_model_np(image_np, model, threshold):
    device = "cuda" if torch.cuda.is_available() else "cpu"  # # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CUDA
    results = model.predict(
        source=image_np,
        imgsz=640,
        device=device,
        conf=threshold,
        verbose=False,
        save=False,
        stream=False,
    )
    detections = []
    for result in results:
        if not hasattr(result, "boxes") or result.boxes is None:
            continue
        for box in result.boxes:
            confidence = float(box.conf)
            if confidence >= threshold:
                label_name = model.names[int(box.cls)].lower()
                x1, y1, x2, y2 = box.xyxy[0]
                bbox = [round(float(coord), 2) for coord in [x1, y1, x2, y2]]
                detections.append(
                    {
                        "label": label_name,
                        "confidence": round(confidence, 4),
                        "bbox": bbox,
                    }
                )
    return detections


# ‚úÖ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö bounding box
def draw_bounding_boxes_from_array(image_np, detections):
    for detection in detections:
        x1, y1, x2, y2 = map(int, detection["bbox"])
        label = detection["label"]
        confidence = detection["confidence"]

        image_height, image_width = image_np.shape[:2]
        x1 = max(0, min(x1, image_width - 1))
        y1 = max(0, min(y1, image_height - 1))
        x2 = max(0, min(x2, image_width - 1))
        y2 = max(0, min(y2, image_height - 1))

        cv2.rectangle(image_np, (x1, y1), (x2, y2), (0, 255, 0), 2)
        text = f"{label} ({confidence:.2f})"
        text_size = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)[0]
        cv2.rectangle(
            image_np,
            (x1, y1 - text_size[1] - 10),
            (x1 + text_size[0], y1),
            (0, 255, 0),
            -1,
        )
        cv2.putText(
            image_np,
            text,
            (x1, y1 - 5),
            cv2.FONT_HERSHEY_SIMPLEX,
            0.5,
            (255, 255, 255),
            2,
        )
    return Image.fromarray(cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB))


# ‚úÖ ‡πÄ‡∏ö‡∏•‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
def blur_detected_areas(image_np, detections, blur_ksize=(51, 51)):
    blurred_image = image_np.copy()
    for detection in detections:
        x1, y1, x2, y2 = map(int, detection["bbox"])
        h, w = blurred_image.shape[:2]
        x1, y1 = max(0, x1), max(0, y1)
        x2, y2 = min(w - 1, x2), min(h - 1, y2)
        roi = blurred_image[y1:y2, x1:x2]
        if roi.size == 0:
            continue
        roi_blurred = cv2.GaussianBlur(roi, blur_ksize, 0)
        blurred_image[y1:y2, x1:x2] = roi_blurred
    return Image.fromarray(cv2.cvtColor(blurred_image, cv2.COLOR_BGR2RGB))


# ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏±‡∏Å Exception
def process_selected_models(image, model_types, thresholds):
    image_np = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

    def run_model(model_type):
        model = models[model_type]
        threshold = thresholds.get(model_type, 0.5)
        return model_type, analyze_model_np(image_np, model, threshold)

    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = [executor.submit(run_model, m) for m in model_types]
        results = [f.result() for f in concurrent.futures.as_completed(futures)]

    all_detections = []
    for model_type, detections in results:
        for d in detections:
            d["model_type"] = model_type
        all_detections.extend(detections)

    output_image_bbox = draw_bounding_boxes_from_array(image_np.copy(), all_detections)
    output_image_blur = blur_detected_areas(image_np.copy(), all_detections)
    json_data = json.dumps(all_detections, indent=4, ensure_ascii=False)

    return output_image_bbox, output_image_blur, json_data


# ‚úÖ API ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô local YOLO
@app.route("/analyze-image", methods=["POST"])
def analyze_image():
    try:
        api_key = request.headers.get("x-api-key")
        api_key_data = api_keys_collection.find_one({"api_key": api_key})
        if not api_key_data:
            return jsonify({"error": "Invalid API Key"}), 401

        expires_at = api_key_data.get("expires_at")
        if expires_at:
            if expires_at.tzinfo is None:
                expires_at = expires_at.replace(tzinfo=timezone.utc)
            if datetime.now(timezone.utc) > expires_at:
                return jsonify({"error": "API Key expired"}), 401

        quota = int(api_key_data["quota"])
        if quota != -1 and quota <= 0:
            return jsonify({"error": "Quota exceeded"}), 400

        if "image" not in request.files:
            return jsonify({"error": "No image file provided"}), 400

        file = request.files["image"]
        ext = file.filename.rsplit(".", 1)[-1].lower()
        filename = f"{uuid.uuid4()}.{ext}"
        file_path = os.path.join(app.config["UPLOAD_FOLDER"], filename)
        file.save(file_path)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á DB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
        uploaded_files_collection.insert_one(
            {"filename": filename, "created_at": datetime.utcnow()}
        )

        if not is_image(file_path):
            if os.path.exists(file_path):
                os.remove(file_path)
                # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å DB ‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå invalid
                uploaded_files_collection.delete_one({"filename": filename})
            return jsonify({"error": "Invalid image"}), 400

        analysis_types = api_key_data.get("analysis_types")
        if not analysis_types:
            analysis_types_json = request.form.get("analysis_types")
            if analysis_types_json:
                analysis_types = json.loads(analysis_types_json)
            else:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    uploaded_files_collection.delete_one({"filename": filename})
                return jsonify({"error": "No analysis_types provided"}), 400

        thresholds = {}
        key_thresholds = api_key_data.get("thresholds", {})
        if key_thresholds:
            thresholds = {k: float(v) for k, v in key_thresholds.items()}
        else:
            thresholds_json = request.form.get("thresholds")
            if thresholds_json:
                thresholds = {
                    k: float(v) for k, v in json.loads(thresholds_json).items()
                }
            else:
                thresholds = {mt: 0.5 for mt in analysis_types}

        image = Image.open(file_path).convert("RGB")
        output_image, blurred_output, detection_json = process_selected_models(
            image, analysis_types, thresholds
        )
        detection_data = json.loads(detection_json)

        processed_filename = f"processed_{uuid.uuid4()}.jpg"
        processed_path = os.path.join(app.config["UPLOAD_FOLDER"], processed_filename)
        output_image.save(processed_path)
        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å processed file
        uploaded_files_collection.insert_one(
            {"filename": processed_filename, "created_at": datetime.utcnow()}
        )

        blurred_filename = f"blurred_{uuid.uuid4()}.jpg"
        blurred_path = os.path.join(app.config["UPLOAD_FOLDER"], blurred_filename)
        blurred_output.save(blurred_path)
        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å blurred file
        uploaded_files_collection.insert_one(
            {"filename": blurred_filename, "created_at": datetime.utcnow()}
        )

        image_url = url_for(
            "uploaded_file", filename=processed_filename, _external=True
        )
        blurred_image_url = url_for(
            "uploaded_file", filename=blurred_filename, _external=True
        )

        status = "passed"
        for d in detection_data:
            threshold = float(thresholds.get(d["model_type"], 0.5))
            if d["confidence"] > threshold:
                status = "failed"
                break

        if os.path.exists(file_path):
            os.remove(file_path)

        if quota != -1:
            api_keys_collection.update_one(
                {"api_key": api_key}, {"$set": {"quota": quota - 1}}
            )

        return jsonify(
            {
                "status": status,
                "detections": detection_data,
                "processed_image_url": image_url,
                "processed_blurred_image_url": blurred_image_url,
            }
        )

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≠ API Key
@app.route("/request-api-key", methods=["POST"])
@token_required
def request_api_key(current_user):  # << ‡∏£‡∏±‡∏ö current_user ‡∏à‡∏≤‡∏Å decorator
    data = request.get_json()
    analysis_types = data.get("analysis_types", [])
    quota = data.get("quota", 100)
    thresholds = data.get("thresholds", {})  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ thresholds ‡∏à‡∏≤‡∏Å‡∏ü‡∏£‡∏≠‡∏ô‡∏ï‡πå
    plan = data.get("plan", "free")

    if not analysis_types:
        return jsonify({"error": "At least one analysis type is required"}), 400

    email = current_user["email"]  # << ‡∏î‡∏∂‡∏á email ‡∏à‡∏≤‡∏Å token ‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡πÅ‡∏•‡πâ‡∏ß

    if plan == "free":
        existing_free_key = api_keys_collection.find_one(
            {"email": email, "plan": "free"}
        )
        if existing_free_key:
            return jsonify({"error": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ç‡∏≠ API Key ‡∏ü‡∏£‡∏µ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"}), 400

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà
    api_key = str(uuid.uuid4())

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    api_keys_collection.insert_one(
        {
            "email": email,
            "api_key": api_key,
            "analysis_types": analysis_types,
            "thresholds": thresholds,
            "quota": quota,
            "plan": plan,
        }
    )

    return jsonify({"apiKey": api_key})


# API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
@app.route("/report-issue", methods=["POST"])
def report_issue():
    issue = request.json.get("issue")
    category = request.json.get("category")

    print(f"Received issue: {issue}, category: {category}")

    if issue and category:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        subject = f"[‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤] ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {category}"
        body = f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {category}\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {issue}"

        try:
            msg = Message(
                subject=subject,
                recipients=["Phurinsukman3@gmail.com"],  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
                body=body,
            )
            mail.send(msg)
            return jsonify({"success": True}), 200
        except Exception as e:
            print(f"Error sending email: {e}")
            return jsonify({"success": False, "error": str(e)}), 500

    return jsonify({"success": False}), 400


# ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• database
@app.route("/get-api-keys", methods=["GET"])
@token_required
def get_api_keys(current_user):
    email = current_user["email"]

    if not email:
        return jsonify({"error": "Email is required"}), 400

    try:
        user = api_keys_collection.find({"email": email})
        api_keys = list(user)
    except Exception as e:
        return jsonify({"error": f"Database error: {str(e)}"}), 500

    if not api_keys:
        return jsonify({"error": "No API keys found for this email"}), 404

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á expires_at ‡∏à‡∏≤‡∏Å datetime ‡πÄ‡∏õ‡πá‡∏ô string
    for key in api_keys:
        if "expires_at" in key and isinstance(key["expires_at"], datetime):
            key["expires_at"] = key["expires_at"].isoformat()

    # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API Keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏° threshold
    return jsonify(
        {
            "api_keys": [
                {
                    "api_key": key.get("api_key", "‡πÑ‡∏°‡πà‡∏û‡∏ö API Key"),
                    "analysis_types": key.get("analysis_types", []),
                    "quota": key.get("quota", 0),
                    "thresholds": key.get(
                        "thresholds", 0.5
                    ),  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ (‡∏Ñ‡πà‡∏≤ default = 0.5 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô DB)
                    "expires_at": key.get("expires_at"),
                }
                for key in api_keys
            ]
        }
    )


@app.route("/get-username", methods=["GET"])
@token_required
def get_username(current_user):
    email = current_user["email"]
    if not email:
        return jsonify({"error": "Missing email parameter"}), 400

    user = users_collection.find_one({"email": email})
    if not user:
        return jsonify({"error": "User not found"}), 404

    return jsonify({"username": user.get("username")}), 200


# API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠
@app.route("/manual")
def download_manual():
    # ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô root directory
    file_path = os.path.join(app.root_path, "manual.pdf")  # 'manual.pdf' ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    return send_from_directory(app.root_path, "manual.pdf")


# ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
@app.route("/uploads/<path:filename>")
def uploaded_file(filename):
    return send_from_directory(
        app.config["UPLOAD_FOLDER"], filename, as_attachment=False
    )


# API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
def generate_qr_code(promptpay_id, amount=0):
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç PromptPay ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    if amount > 0:
        payload = qrcode.generate_payload(promptpay_id, amount)
    else:
        payload = qrcode.generate_payload(promptpay_id)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏à‡∏≤‡∏Å payload
    img = qrcode.to_image(payload)

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û QR Code ‡πÄ‡∏õ‡πá‡∏ô Base64
    buffered = BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()

    return f"data:image/png;base64,{img_str}"


# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á ref_code ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å order
@app.route("/generate_qr", methods=["POST"])
@token_required
def generate_qr(current_user):
    # üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ order ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    existing_unpaid_order = orders_collection.find_one(
        {"email": current_user["email"], "paid": False}
    )

    if existing_unpaid_order:
        # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ order ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞ ‚Üí ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ order ‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        ref_code = existing_unpaid_order[
            "ref_code"
        ]  # ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ ref_code ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
        amount = existing_unpaid_order["amount"]
        promptpay_id = "66882884744"  # ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å config

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å order ‡πÄ‡∏î‡∏¥‡∏°
        qr_base64 = generate_qr_code(promptpay_id, amount)

        return jsonify(
            {
                "qr_code_url": qr_base64,
                "ref_code": ref_code,
                "message": "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞",
            }
        )

    # --- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ order ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ---
    data = request.get_json()
    amount = float(data.get("amount", 0))
    promptpay_id = data.get("promptpay_id", "66882884744")
    email = current_user["email"]
    quota = int(data.get("quota", 100))
    plan = data.get("plan", "paid")
    analysis_types = data.get("analysis_types", [])
    thresholds = data.get("thresholds", {})
    duration = int(data.get("duration", 1))

    # ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
    thai_time = datetime.now(ZoneInfo("Asia/Bangkok"))
    current_time = thai_time.strftime("%d/%m/%Y %H:%M:%S")
    timestamp = thai_time.strftime("%Y%m%d%H%M%S")
    random_str = secrets.token_hex(4).upper()
    ref_code = f"{current_time} {timestamp}{random_str}"

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    orders_collection.insert_one(
        {
            "ref_code": ref_code,
            "email": email,
            "amount": amount,
            "quota": quota,
            "plan": plan,
            "duration": duration,
            "analysis_types": analysis_types,
            "thresholds": thresholds,
            "paid": False,
            "created_at": current_time,
            "created_time": datetime.now(timezone.utc),
        }
    )

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á QR
    qr_base64 = generate_qr_code(promptpay_id, amount)

    return jsonify({"qr_code_url": qr_base64, "ref_code": ref_code})


# TTL index
orders_collection.create_index([("email", 1), ("paid", 1), ("created_time", -1)])


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ QR Code ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def check_qrcode(image_path):
    image = cv2.imread(image_path)
    if image is None:
        return False
    detector = cv2.QRCodeDetector()
    retval, points = detector.detect(image)  # ‡πÉ‡∏ä‡πâ detect() ‡πÅ‡∏ó‡∏ô detectAndDecode()

    if retval:  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ QR code ‡πÉ‡∏ô‡∏†‡∏≤‡∏û
        return True
    return False


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ
@app.route("/upload-receipt", methods=["POST"])
@token_required
def upload_receipt(current_user):
    save_path = None  # ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î
    try:
        if "receipt" not in request.files:
            return jsonify({"error": "No receipt file provided"}), 400

        file = request.files["receipt"]
        filename = secure_filename(file.filename)
        save_path = os.path.join(app.config["UPLOAD_FOLDER"], filename)
        file.save(save_path)
        print(f"üì• Saved file: {save_path}")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.info

        if not is_image(save_path):
            return jsonify({"error": "‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"}), 400

        if not check_qrcode(save_path):
            return jsonify({"error": "‡∏£‡∏π‡∏õ‡πÄ‡πÄ‡∏ö‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}), 400

        # Initialize OCR
        try:
            ocr_engine = AdvancedSlipOCR()
        except Exception as e:
            print(f"Failed to initialize OCR engine: {e}")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.error
            return jsonify({"error": "‡∏£‡∏∞‡∏ö‡∏ö OCR ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"}), 500

        # Process image
        try:
            image = Image.open(save_path).convert("RGB")
            ocr_data = ocr_engine.extract_info(image)
        except Exception as e:
            print(f"Failed to process image: {e}")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.error
            return jsonify({"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ"}), 500

        # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• OCR ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‚Äî ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô None
        text = ocr_data.get("full_text", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
        date_text = ocr_data.get("date", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
        time_ocr = ocr_data.get("time", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤")
        amount = ocr_data.get("amount", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô")
        full_name = ocr_data.get("full_name", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠")
        time_receipts = ocr_data.get("time_receipts", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤")

        print("=== OCR RESULT ===")
        print("OCR Full Text: ", text)
        print("Date from OCR: ", date_text)
        print("Time from OCR: ", time_ocr)
        print("Amount from OCR: ", amount)
        print("full_name: ", full_name)
        print("time_receipts: ", time_receipts)
        print("==================")

        # Validate required fields
        required_fields = [
            "full_text",
            "date",
            "time",
            "amount",
            "full_name",
            "time_receipts",
        ]
        for field in required_fields:
            if not ocr_data.get(field):
                print(f"‚ùå Missing field: {field}")  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡∏ô‡∏µ‡πâ
                return jsonify({"error": f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {field} ‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á"}), 400

        # Log extracted data
        text = ocr_data["full_text"]
        date_text = ocr_data["date"]
        time_ocr = ocr_data["time"]
        amount = ocr_data["amount"]
        full_name = ocr_data["full_name"]
        time_receipts = ocr_data["time_receipts"]

        print("OCR Full Text: ", text)
        print("Date from OCR: ", date_text)
        print("Time from OCR: ", time_ocr)
        print("Amount from OCR: ", amount)
        print("full_name: ", full_name)
        print("time_receipts: ", time_receipts)

        # Find unpaid order
        matched_order = orders_collection.find_one(
            {"email": current_user["email"], "paid": False},
            sort=[("created_time", -1)],
        )

        if not matched_order:
            return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì"}), 404

        # Validate recipient name
        allowed_names = ["‡∏†‡∏π‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏™‡∏∏‡∏Ç‡∏°‡∏±‡πà‡∏ô", "‡∏†‡∏π‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏™‡∏∏‡∏Ç‡∏°‡∏±‡πà‡∏ô", "‡∏†‡∏π‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå ‡∏™‡∏∏‡∏Ç‡∏°‡∏±‡πà‡∏ô"]
        full_name_clean = full_name.strip().replace(" ", "").lower()
        allowed_names_clean = [name.replace(" ", "").lower() for name in allowed_names]

        if not any(name in full_name_clean for name in allowed_names_clean):
            return jsonify({"error": "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}), 400

        # Validate date
        try:
            created_datetime = datetime.strptime(
                matched_order["created_at"], "%d/%m/%Y %H:%M:%S"
            )
        except Exception as e:
            print(f"Error parsing created_at: {e}")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.error
            return jsonify({"error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"}), 500

        if date_text:
            try:
                date_from_ocr = datetime.strptime(date_text, "%d/%m/%Y").date()
                if date_from_ocr != created_datetime.date():
                    return jsonify({"error": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå"}), 400
            except Exception as e:
                print(f"Error parsing OCR date: {e}")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.error
                return jsonify({"error": "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡∏ú‡∏¥‡∏î"}), 400

        # Validate time
        if time_receipts:
            try:
                time_from_ocr = datetime.strptime(time_receipts, "%H:%M")
                time_from_ocr_full = datetime.combine(
                    created_datetime.date(), time_from_ocr.time()
                )
                time_diff = abs((created_datetime - time_from_ocr_full).total_seconds())
                if time_diff > 300:
                    return jsonify({"error": "‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ"}), 400
            except Exception as e:
                print(f"Error parsing OCR time: {e}")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.error
                return jsonify({"error": "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡∏ú‡∏¥‡∏î"}), 400

        # Validate amount
        if amount:
            try:
                amount_clean = float(amount.replace(",", ""))
                if float(matched_order.get("amount", 0)) != amount_clean:
                    return jsonify({"error": "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"}), 400
            except Exception as e:
                print(f"Error parsing amount: {e}")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.error
                return jsonify({"error": "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ"}), 400

        # Update order & generate API key
        orders_collection.update_one(
            {"_id": matched_order["_id"]},
            {
                "$set": {
                    "paid": True,
                    "paid_at": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                }
            },
        )

        api_key = str(uuid.uuid4())
        plan = matched_order.get("plan", "paid")
        insert_data = {
            "email": matched_order.get("email", ""),
            "api_key": api_key,
            "analysis_types": matched_order.get("analysis_types", []),
            "thresholds": matched_order.get("thresholds", {}),
            "quota": -1 if plan == "monthly" else matched_order.get("quota", 100),
            "plan": plan,
            "created_at": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
        }

        if plan == "monthly":
            duration = matched_order.get("duration", 1)
            insert_data["expires_at"] = datetime.now(timezone.utc) + relativedelta(
                months=+duration
            )

        api_keys_collection.insert_one(insert_data)
        orders_collection.delete_one({"_id": matched_order["_id"]})

        print("‚úÖ Upload receipt completed successfully")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.info
        return (
            jsonify(
                {
                    "success": True,
                    "message": "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    "api_key": api_key,
                    "ocr_data": {
                        "date": date_text,
                        "time": time_ocr,
                        "amount": amount,
                        "fullname": full_name,
                        "full_text": text,
                    },
                }
            ),
            200,
        )

    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.error
        return jsonify({"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}), 500

    finally:
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‚Äî ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà
        if save_path and os.path.exists(save_path):
            try:
                os.remove(save_path)
                print(f"üßπ Deleted temporary file: {save_path}")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.info
            except Exception as e:
                print(f"‚ö†Ô∏è Failed to delete {save_path}: {e}")  # ‚úÖ ‡πÅ‡∏ó‡∏ô logger.error


# TTL Index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Key ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
api_keys_collection.create_index([("expires_at", 1)], expireAfterSeconds=0)


@app.route("/upload", methods=["POST"])
def upload():
    try:
        file = request.files["image"]
        analysis_types = request.form.get("analysis_types")  # JSON string
        thresholds = request.form.get("thresholds")  # JSON string

        files = {"image": (file.filename, file.stream, file.mimetype)}

        data = {"analysis_types": analysis_types, "thresholds": thresholds}

        response = requests.post(
            "https://objexify.dpdns.org/analyze-image",
            headers={"x-api-key": API_KEY},
            files=files,
            data=data,
        )

        return (response.text, response.status_code, response.headers.items())

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/auth/google")
def auth_google():
    google_auth_url = (
        f"https://accounts.google.com/o/oauth2/v2/auth?"
        f"client_id={GOOGLE_CLIENT_ID}&"
        f"redirect_uri={GOOGLE_REDIRECT_URI}&"
        f"response_type=code&"
        f"scope=openid email profile"
    )
    return redirect(google_auth_url)


@app.route("/auth/google/callback")
def google_callback():
    code = request.args.get("code")
    if not code:
        return jsonify({"error": "Authorization code not found"}), 400

    # ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô code ‡πÄ‡∏õ‡πá‡∏ô access token
    token_url = "https://oauth2.googleapis.com/token"
    token_data = {
        "code": code,
        "client_id": GOOGLE_CLIENT_ID,
        "client_secret": GOOGLE_CLIENT_SECRET,
        "redirect_uri": GOOGLE_REDIRECT_URI,
        "grant_type": "authorization_code",
    }
    token_response = requests.post(token_url, data=token_data)
    token_json = token_response.json()

    access_token = token_json.get("access_token")

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user_info_url = "https://www.googleapis.com/oauth2/v1/userinfo"
    user_info_response = requests.get(
        user_info_url, headers={"Authorization": f"Bearer {access_token}"}
    )
    user_info = user_info_response.json()

    email = user_info.get("email")
    user = users_collection.find_one({"email": email})
    if not user:
        users_collection.insert_one(
            {
                "email": email,
                "username": user_info.get("name"),
                "password": None,  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Google
            }
        )

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token ‡πÉ‡∏´‡πâ user
    token = generate_token(email)

    # ‡∏™‡πà‡∏á token ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ frontend ‡∏ú‡πà‡∏≤‡∏ô query string
    return redirect(f"{API_BASE_URL}/apikey/view-api-keys.html?token={token}")


# ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
@app.route("/reset-request", methods=["POST"])
@token_required
def reset_request():
    email = request.json.get("email")
    if not users_collection.find_one({"email": email}):
        return jsonify({"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ"}), 404

    otp = str(random.randint(100000, 999999))
    expiration = datetime.utcnow() + timedelta(minutes=5)

    otp_collection.update_one(
        {"email": email},
        {"$set": {"otp": otp, "otp_expiration": expiration, "used": False}},
        upsert=True,
    )

    msg = Message("OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", recipients=[email])
    msg.body = f"‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: {otp}"
    mail.send(msg)

    return jsonify({"message": "‡∏™‡πà‡∏á OTP ‡πÅ‡∏•‡πâ‡∏ß"}), 200


# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP
@app.route("/verify-otp", methods=["POST"])
def verify_otp():
    data = request.json
    email = data.get("email")
    otp = data.get("otp")

    record = otp_collection.find_one({"email": email, "otp": otp, "used": False})
    if not record:
        return jsonify({"message": "OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}), 400

    if record["otp_expiration"] < datetime.utcnow():
        return jsonify({"message": "OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß"}), 400

    return jsonify({"message": "OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}), 200


# ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
@app.route("/reset-password", methods=["POST"])
def reset_password():
    data = request.json
    email = data.get("email")
    otp = data.get("otp")
    password = data.get("password")
    confirm_password = data.get("confirm_password")

    if password != confirm_password:
        return jsonify({"message": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"}), 400

    record = otp_collection.find_one({"email": email, "otp": otp, "used": False})
    if not record or record["otp_expiration"] < datetime.utcnow():
        return jsonify({"message": "OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏"}), 400

    # ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    hashed_password = generate_password_hash(
        password, method="pbkdf2:sha256", salt_length=8
    )

    users_collection.update_one(
        {"email": email}, {"$set": {"password": hashed_password}}
    )
    otp_collection.update_one({"email": email}, {"$set": {"used": True}})

    return jsonify({"message": "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"}), 200


def cleanup_expired_files():
    """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å disk"""
    folder = app.config["UPLOAD_FOLDER"]
    try:
        current_files = set(os.listdir(folder))
        active_files = set(doc["filename"] for doc in uploaded_files_collection.find())
        expired_files = current_files - active_files
        for fname in expired_files:
            try:
                os.remove(os.path.join(folder, fname))
                print(f"üßπ Deleted expired file: {fname}")
            except Exception as e:
                print(f"‚ùå Error deleting {fname}: {e}")
    except Exception as e:
        print(f"Cleanup system error: {e}")


def start_cleanup_scheduler():
    import threading
    import time

    def run():
        while True:
            cleanup_expired_files()
            time.sleep(300)  # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ

    thread = threading.Thread(target=run, daemon=True)
    thread.start()


start_cleanup_scheduler()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
